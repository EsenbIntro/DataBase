university=# CREATE TABLE students (
university(#     student_id INTEGER PRIMARY KEY,
university(#     name VARCHAR(100),
university(#     email VARCHAR(150)
university(# );
CREATE TABLE

university=# DROP TABLE students;
DROP TABLE

university=# CREATE TABLE students (
university(#     student_id INTEGER,
university(#     name VARCHAR(100),
university(#     email VARCHAR(150),
university(#     PRIMARY KEY (student_id)
university(# );
CREATE TABLE

university=# DROP TABLE students;
DROP TABLE

university=# CREATE TABLE students (
university(#     student_id INTEGER,
university(#     name VARCHAR(100),
university(#     email VARCHAR(150),
university(#     CONSTRAINT pk_students PRIMARY KEY (student_id)
university(# );
CREATE TABLE

university=# CREATE TABLE students (
university(#    student_id INTEGER,
university(#    name VARCHAR(100),
university(#    email VARCHAR(200)
university(# );
CREATE TABLE

university=# DROP TABLE students;
DROP TABLE

university=# ALTER TABLE students ADD CONSTRAINT pk_students PRIMARY KEY (student_id);
ALTER TABLE
university=#

university=# \d students
                       Table "public.students"
   Column   |          Type          | Collation | Nullable | Default
------------+------------------------+-----------+----------+---------
 student_id | integer                |           | not null |
 name       | character varying(100) |           |          |
 email      | character varying(200) |           |          |
Indexes:
    "pk_students" PRIMARY KEY, btree (student_id)

university=# DROP TABLE students;
DROP TABLE

CREATE TABLE students (
    student_id SERIAL PRIMARY KEY,
    name VARCHAR(100) NOT NULL,
    email VARCHAR(150) UNIQUE,
    faculty VARCHAR(50)
);

INSERT INTO students (name, email, faculty) VALUES
('Alice Johnson', 'alice@alatoo.edu.kg', 'Computer Science'),
('Bob Smith', 'bob@alatoo.edu.kg', 'Mathematics'),
('Carol Davis', 'carol@alatoo.edu.kg', 'Computer Science');

university=# SELECT * FROM students;
 student_id |     name      |        email        |     faculty
------------+---------------+---------------------+------------------
          1 | Alice Johnson | alice@alatoo.edu.kg | Computer Science
          2 | Bob Smith     | bob@alatoo.edu.kg   | Mathematics
          3 | Carol Davis   | carol@alatoo.edu.kg | Computer Science
(3 rows)

university=# CREATE TABLE course_enrollments (
university(#    student_id INTEGER,
university(#    course_id INTEGER,
university(#    semester VARCHAR(20),
university(#    enrollment_date DATE DEFAULT CURRENT_DATE,
university(#    grade CHAR(2),
university(#    PRIMARY KEY (student_id, course_id, semester)
university(# );
CREATE TABLE

university=# INSERT INTO course_enrollments (student_id, course_id, semester, grade) VALUES
university-# (1, 101, '2024-Spring', 'A'),
university-# (1, 102, '2024-Spring', 'B+'),
university-# (2, 101, '2024-Spring', 'A-'),
university-# (1, 101, '2024-Fall', 'A+');
INSERT 0 4

university=# SELECT * FROM course_enrollments;
 student_id | course_id |  semester   | enrollment_date | grade
------------+-----------+-------------+-----------------+-------
          1 |       101 | 2024-Spring | 2025-09-03      | A
          1 |       102 | 2024-Spring | 2025-09-03      | B+
          2 |       101 | 2024-Spring | 2025-09-03      | A-
          1 |       101 | 2024-Fall   | 2025-09-03      | A+
(4 rows)

university=# CREATE TABLE products (
university(#    product_id SERIAL PRIMARY KEY,
university(#    product_name VARCHAR(100) NOT NULL,
university(#    price DECIMAL(10,2)
university(# );
CREATE TABLE

university=# CREATE TABLE transactions (
university(#    transaction_id BIGSERIAL PRIMARY KEY,
university(#    amount DECIMAL(15,2),
university(#    transaction_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP
university(# );
CREATE TABLE

university=# CREATE TABLE orders (
university(#     order_id INTEGER GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
university(#     customer_name VARCHAR(100),
university(#     order_date DATE DEFAULT CURRENT_DATE
university(# );
CREATE TABLE

university=# CREATE TABLE customers (
university(#     customer_id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
university(#     customer_name VARCHAR(100),
university(#     email VARCHAR(150)
university(# );
CREATE TABLE

university=# INSERT INTO customers (customer_id, customer_name, email)
university-# VALUES (1000, 'VIP Customer', 'vip@example.com');
INSERT 0 1

university=# SELECT * FROM customers;
 customer_id | customer_name |      email
-------------+---------------+-----------------
        1000 | VIP Customer  | vip@example.com
(1 row)

university=# CREATE TABLE departments (
university(#     dept_id INTEGER PRIMARY KEY,
university(#     dept_name VARCHAR(100)
university(# );
CREATE TABLE

university=# INSERT INTO departments VALUES (1, 'Computer Science');
INSERT 0 1

university=# INSERT INTO departments VALUES (1, 'Mathematics');
ERROR:  duplicate key value violates unique constraint "departments_pkey"
DETAIL:  Key (dept_id)=(1) already exists.

university=# \dt
                List of relations
 Schema |        Name         | Type  |  Owner
--------+---------------------+-------+----------
 public | course_enrollments  | table | postgres
 public | customers           | table | postgres
 public | departments         | table | postgres
 public | orders              | table | postgres
 public | products            | table | postgres
 public | students            | table | postgres
 public | transactions        | table | postgres
 public | university_students | table | postgres
(8 rows)


university=# \d university_students
                                      Table "public.university_students"
    Column     |          Type          | Collation | Nullable |                   Default
---------------+------------------------+-----------+----------+----------------------------------------------
 student_id    | integer                |           | not null | nextval('students_student_id_seq'::regclass)
 first_name    | text                   |           | not null |
 last_name     | character varying(50)  |           | not null |
 email_address | character varying(100) |           | not null |
 date_of_birth | date                   |           |          |
Indexes:
    "students_pkey" PRIMARY KEY, btree (student_id)
    "students_email_key" UNIQUE CONSTRAINT, btree (email_address)
    "unique_student_email" UNIQUE CONSTRAINT, btree (email_address)