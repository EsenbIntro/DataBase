                      FOREIGN KEYS

university=# CREATE TABLE departments (
university(#    dept_id SERIAL PRIMARY KEY,
university(#    dept_name VARCHAR(100) NOT NULL,
university(#    location VARCHAR(100)
university(# );
CREATE TABLE

university=# CREATE TABLE employees (
university(#    emp_id SERIAL PRIMARY KEY,
university(#    first_name VARCHAR(50) NOT NULL,
university(#    last_name VARCHAR(50) NOT NULL,
university(#    dept_id INTEGER REFERENCES departments(dept_id)
university(# );
CREATE TABLE

university=# \d employees
                                       Table "public.employees"
   Column   |         Type          | Collation | Nullable |                  Default
------------+-----------------------+-----------+----------+-------------------------------------------
 emp_id     | integer               |           | not null | nextval('employees_emp_id_seq'::regclass)
 first_name | character varying(50) |           | not null |
 last_name  | character varying(50) |           | not null |
 dept_id    | integer               |           |          |
Indexes:
    "employees_pkey" PRIMARY KEY, btree (emp_id)
Foreign-key constraints:
    "employees_dept_id_fkey" FOREIGN KEY (dept_id) REFERENCES departments(dept_id)

university=# DROP TABLE employees;
DROP TABLE

university=# CREATE TABLE employees (
university(#    emp_id SERIAL PRIMARY KEY,
university(#    first_name VARCHAR(50) NOT NULL,
university(#    last_name VARCHAR(50) NOT NULL,
university(#    dept_id INTEGER,
university(#    FOREIGN KEY (dept_id) REFERENCES departments(dept_id)
university(# );
CREATE TABLE

university=# \d employees
                                       Table "public.employees"
   Column   |         Type          | Collation | Nullable |                  Default
------------+-----------------------+-----------+----------+-------------------------------------------
 emp_id     | integer               |           | not null | nextval('employees_emp_id_seq'::regclass)
 first_name | character varying(50) |           | not null |
 last_name  | character varying(50) |           | not null |
 dept_id    | integer               |           |          |
Indexes:
    "employees_pkey" PRIMARY KEY, btree (emp_id)
Foreign-key constraints:
    "employees_dept_id_fkey" FOREIGN KEY (dept_id) REFERENCES departments(dept_id)

university=# DROP TABLE employees;
DROP TABLE

university=# CREATE TABLE employees (
university(#    emp_id SERIAL PRIMARY KEY,
university(#    first_name VARCHAR(50) NOT NULL,
university(#    last_name VARCHAR(50) NOT NULL,
university(#    dept_id INTEGER
university(# );
CREATE TABLE

university=# ALTER TABLE employees
university-# ADD CONSTRAINT fk_employee_department
university-# FOREIGN KEY (dept_id) REFERENCES departments(dept_id);
ALTER TABLE

university=# \d employees
                                       Table "public.employees"
   Column   |         Type          | Collation | Nullable |                  Default
------------+-----------------------+-----------+----------+-------------------------------------------
 emp_id     | integer               |           | not null | nextval('employees_emp_id_seq'::regclass)
 first_name | character varying(50) |           | not null |
 last_name  | character varying(50) |           | not null |
 dept_id    | integer               |           |          |
Indexes:
    "employees_pkey" PRIMARY KEY, btree (emp_id)
Foreign-key constraints:
    "fk_employee_department" FOREIGN KEY (dept_id) REFERENCES departments(dept_id)

university=# INSERT INTO departments (dept_name, location) VALUES
university-#    ('Engineering', 'Building A'),
university-#    ('Marketing', 'Building B'),
university-#    ('HR', 'Building C');
INSERT 0 3

university=# INSERT INTO employees (first_name, last_name, dept_id) VALUES
university-#    ('John', 'Smith', 1);
INSERT 0 1

university=# INSERT INTO employees (first_name, last_name, dept_id) VALUES
university-#    ('Jane', 'Doe', 99);
ERROR:  insert or update on table "employees" violates foreign key constraint "fk_employee_department"
DETAIL:  Key (dept_id)=(99) is not present in table "departments".

university=# DELETE FROM departments WHERE dept_id = 1;
ERROR:  update or delete on table "departments" violates foreign key constraint "fk_employee_department" on table "employees"
DETAIL:  Key (dept_id)=(1) is still referenced from table "employees".

university=# DROP TABLE employees;
DROP TABLE

university=# CREATE TABLE employees (
university(#    emp_id SERIAL PRIMARY KEY,
university(#    first_name VARCHAR(50) NOT NULL,
university(#    last_name VARCHAR(50) NOT NULL,
university(#    dept_id INTEGER REFERENCES departments(dept_id) ON DELETE CASCADE
university(# );
CREATE TABLE

university=# DELETE FROM departments WHERE dept_id = 1;
DELETE 1

university=# SELECT * FROM departments;
 dept_id | dept_name |  location
---------+-----------+------------
       2 | Marketing | Building B
       3 | HR        | Building C
(2 rows)

university=# SELECT * FROM employees;
 emp_id | first_name | last_name | dept_id
--------+------------+-----------+---------
(0 rows)

university=# INSERT INTO departments (dept_id, dept_name, location) )VALUES (1, 'Engineering', 'Building A');
INSERT 0 1

university=# SELECT * FROM departments;
 dept_id |  dept_name  |  location
---------+-------------+------------
       2 | Marketing   | Building B
       3 | HR          | Building C
       1 | Engineering | Building A
(3 rows)

university=# \d employees
                                       Table "public.employees"
   Column   |         Type          | Collation | Nullable |                  Default
------------+-----------------------+-----------+----------+-------------------------------------------
 emp_id     | integer               |           | not null | nextval('employees_emp_id_seq'::regclass)
 first_name | character varying(50) |           | not null |
 last_name  | character varying(50) |           | not null |
 dept_id    | integer               |           |          |
Indexes:
    "employees_pkey" PRIMARY KEY, btree (emp_id)
Foreign-key constraints:
    "employees_dept_id_fkey" FOREIGN KEY (dept_id) REFERENCES departments(dept_id) ON DELETE CASCADE

university=# ALTER TABLE employees
university-# DROP CONSTRAINT employees_dept_id_fkey;
ALTER TABLE

university=# ALTER TABLE employees
university-# ADD CONSTRAINT employees_dept_id_fkey
university-# FOREIGN KEY (dept_id) REFERENCES departments(dept_id)
university-# ON DELETE SET NULL;
ALTER TABLE

university=# INSERT INTO employees (first_name, last_name, dept_id) VALUES ('John', 'Smith', 1);
INSERT 0 1

university=# DELETE FROM departments WHERE dept_id = 1;
DELETE 1

university=# SELECT * FROM employees;
 emp_id | first_name | last_name | dept_id
--------+------------+-----------+---------
      1 | John       | Smith     |
(1 row)

university=# ALTER TABLE employees
university-# DROP CONSTRAINT employees_dept_id_fkey;
ALTER TABLE

university=# ALTER TABLE employees
university-# ADD CONSTRAINT employees_dept_id_fkey
university-# FOREIGN KEY (dept_id) REFERENCES departments(dept_id) ON UPDATE CASCADE;
ALTER TABLE

university=# INSERT INTO employees (first_name, last_name, dept_id) VALUES ('Katy', 'Perry', 2);
INSERT 0 1

university=# SELECT * FROM employees;
 emp_id | first_name | last_name | dept_id
--------+------------+-----------+---------
      1 | John       | Smith     |
      2 | Katy       | Perry     |       2
(2 rows)

university=# UPDATE departments SET dept_id = 100 WHERE dept_id = 2;
UPDATE 1

university=# SELECT * FROM employees;
 emp_id | first_name | last_name | dept_id
--------+------------+-----------+---------
      1 | John       | Smith     |
      2 | Katy       | Perry     |     100
(2 rows)

                            RELATIONS

university=# CREATE TABLE users (
university(#    user_id SERIAL PRIMARY KEY,
university(#    username VARCHAR(50) UNIQUE NOT NULL,
university(#    email VARCHAR(100) UNIQUE NOT NULL,
university(#    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
university(# );
CREATE TABLE

university=# CREATE TABLE user_profiles (
university(#    profile_id SERIAL PRIMARY KEY,
university(#    user_id INTEGER UNIQUE NOT NULL,
university(#    first_name VARCHAR(50),
university(#    last_name VARCHAR(50),
university(#    bio TEXT,
university(#    profile_picture_url VARCHAR(255),
university(#    FOREIGN KEY (user_id) REFERENCES users(user_id) ON DELETE CASCADE
university(# );
CREATE TABLE

university=# INSERT INTO users (username, email) VALUES
university-#    ('johndoe', 'john@example.com');
INSERT 0 1

university=# INSERT INTO user_profiles (user_id, first_name, last_name, bio) VALUES
university-# (1, 'John', 'Doe', 'Software developer passionate about databases');
INSERT 0 1

university=# INSERT INTO user_profiles (user_id, first_name, last_name) VALUES
university-#    (1, 'Jane', 'Smith');
ERROR:  duplicate key value violates unique constraint "user_profiles_user_id_key"
DETAIL:  Key (user_id)=(1) already exists.

university=# SELECT * FROM user_profiles;
 profile_id | user_id | first_name | last_name |                      bio                      | profile_picture_url
------------+---------+------------+-----------+-----------------------------------------------+---------------------
          1 |       1 | John       | Doe       | Software developer passionate about databases |
(1 row)

university=# DROP TABLE departments CASCADE;
NOTICE:  drop cascades to constraint employees_dept_id_fkey on table employees
DROP TABLE

university=# \dt
                List of relations
 Schema |        Name         | Type  |  Owner
--------+---------------------+-------+----------
 public | course_enrollments  | table | postgres
 public | customers           | table | postgres
 public | employees           | table | postgres
 public | orders              | table | postgres
 public | products            | table | postgres
 public | students            | table | postgres
 public | transactions        | table | postgres
 public | university_students | table | postgres
 public | user_profiles       | table | postgres
 public | users               | table | postgres
(10 rows)


university=# DROP TABLE employees;
DROP TABLE

university=# CREATE TABLE departments (
university(#    dept_id SERIAL PRIMARY KEY,
university(#    dept_name VARCHAR(100) NOT NULL,
university(#    manager_name VARCHAR(100),
university(#    budget DECIMAL(10, 2)
university(# );
CREATE TABLE

university=# CREATE TABLE employees (
university(#    emp_id SERIAL PRIMARY KEY,
university(#    first_name VARCHAR(50) NOT NULL,
university(#    last_name VARCHAR(50) NOT NULL,
university(#    position VARCHAR(100),
university(#    salary DECIMAL(10,2),
university(#    hire_date DATE DEFAULT CURRENT_DATE,
university(#    dept_id INTEGER NOT NULL,
university(#    FOREIGN KEY (dept_id) REFERENCES departments(dept_id) ON DELETE RESTRICT
university(# );
CREATE TABLE

university=# INSERT INTO departments (dept_name, manager_name, budget) VALUES
university-#    ('Engineering', 'Alice Johnson', 500000.00),
university-#    ('Marketing', 'Bob Wilson', 200000.00);
INSERT 0 2

university=# INSERT INTO employees (first_name, last_name, position, salary, dept_id) VALUES
university-#    ('John', 'Smith', 'Software Engineer', 75000.00, 1),
university-#    ('Jane', 'Doe', 'Senior Developer', 85000.00, 1),
university-#    ('Mike', 'Brown', 'DevOps Engineer', 80000.00, 1),
university-#    ('Sarah', 'Davis', 'Marketing Specialist', 55000.00, 2);

university=# SELECT d.dept_name, e.first_name, e.last_name, e.position
university-# FROM departments d
university-# JOIN employees e ON d.dept_id = e.dept_id
university-# ORDER BY d.dept_name, e.last_name;
  dept_name  | first_name | last_name |       position
-------------+------------+-----------+----------------------
 Engineering | Mike       | Brown     | DevOps Engineer
 Engineering | Jane       | Doe       | Senior Developer
 Engineering | John       | Smith     | Software Engineer
 Marketing   | Sarah      | Davis     | Marketing Specialist
(4 rows)

university=# DROP TABLE students;
DROP TABLE

university=# CREATE TABLE students (	
university=(#   student_id SERIAL PRIMARY KEY.	
university=(#   first_name VARCHAR(50) NOT NULL,	
university=(#   last_name VARCHAR (50) NOT NULL,	
university=(#   email VARCHAR(100) UNIQUE,	
university=(#   enrollment_date DATE DEFAULT CURRENT_DATE	
university=(# );	
CREATE TABLE

university=# CREATE TABLE courses (
university(#     course_id SERIAL PRIMARY KEY,
university(#     course_code VARCHAR(10) UNIQUE NOT NULL,
university(#     course_name VARCHAR(100) NOT NULL,
university(#     credits INTEGER NOT NULL,
university(#     instructor VARCHAR (100)
university(# );
CREATE TABLE

university=# CREATE TABLE student_enrollments (
university(#     enrollment_id SERIAL PRIMARY KEY,
university(#     student_id INTEGER NOT NULL,
university(#     course_id INTEGER NOT NULL,
university(#     enrollment_date DATE DEFAULT CURRENT_DATE,
university(#     grade CHAR(2),
university(#     FOREIGN KEY (student_id) REFERENCES students(student_id) ON DELETE CASCADE,
university(#     FOREIGN KEY        (course_id) REFERENCES courses(course_id) ON DELETE CASCADE,
university(#     UNIQUE(student_id, course_id)
university(# );
CREATE TABLE

university=# INSERT INTO students (first_name, last_name, email) VALUES
university-#    ('Alice', 'Johnson', 'alice@university.edu'),
university-#    ('Bob', 'Smith', 'bob@university.edu'),
university-#    ('Carol', 'Wilson', 'carol@university.edu');
INSERT 0 3

university=# INSERT INTO courses (course_code, course_name, credits, instructor) VALUES
university-#    ('CS101', 'Introduction to Programming', 3, 'Dr. Brown'),
university-#    ('CS201', 'Data Structures', 4, 'Dr. Davis'),
university-#    ('MATH101', 'Calculus I', 4,'Dr. Wilson');
INSERT 0 3

university=# INSERT INTO student_enrollments (student_id, course_id, grade) VALUES
university-#     (1, 1,'A'),
university-#     (1, 2,'B+'),
university-#     (2, 1,'A-'),
university-#     (2, 3,'B'),
university-#     (3, 2,'A'),
university-#     (3, 3,'A-');
INSERT 0 6

university=# SELECT
university-#    s.first_name || ' ' || s.last_name AS student_name,
university-#    c.course_code,
university-#    c.course_name,
university-#    se.grade,
university-#    se.enrollment_date
university-# FROM students s
university-# JOIN student_enrollments se ON s.student_id = se.student_id
university-# JOIN courses c ON se.course_id = c.course_id
university-# ORDER BY s.last_name, c.course_code;
 student_name  | course_code |         course_name         | grade | enrollment_date
---------------+-------------+-----------------------------+-------+-----------------
 Alice Johnson | CS101       | Introduction to Programming | A     | 2025-09-08
 Alice Johnson | CS201       | Data Structures             | B+    | 2025-09-08
 Bob Smith     | CS101       | Introduction to Programming | A-    | 2025-09-08
 Bob Smith     | MATH101     | Calculus I                  | B     | 2025-09-08
 Carol Wilson  | CS201       | Data Structures             | A     | 2025-09-08
 Carol Wilson  | MATH101     | Calculus I                  | A-    | 2025-09-08
(6 rows)

university=# SELECT s.first_name, s.last_name, se.grade
university-# FROM students s
university-# JOIN student_enrollments se ON s.student_id = se.student_id
university-# JOIN courses c ON se.course_id = c.course_id
university-# WHERE c.course_code = 'CS101';
 first_name | last_name | grade
------------+-----------+-------
 Alice      | Johnson   | A
 Bob        | Smith     | A-
(2 rows)

university=# SELECT c.course_code, c.course_name, c.credits, se.grade
university-# FROM courses c
university-# JOIN student_enrollments se ON c.course_id = se.course_id
university-# JOIN students s ON se.student_id = s.student_id
university-# WHERE s.email = 'alice@university.edu';
 course_code |         course_name         | credits | grade
-------------+-----------------------------+---------+-------
 CS101       | Introduction to Programming |       3 | A
 CS201       | Data Structures             |       4 | B+
(2 rows)